<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up viewControl global

global.canControlView = true;

targetViewWidth = 0;
minViewWidth = 256;
midViewWidth = 512;
maxViewWidth = 512;

zoomingIn = false;
zoomingOut = false;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom view
if(global.canControlView) {
    
    if(zoomingIn) {
        if(view_wview &gt; targetViewWidth) {
            view_zoom(-1);
        } else {
            zoomingIn = false;
        }
    } else if (zoomingOut) {
        if(view_wview &lt; targetViewWidth) {
            view_zoom(1);
        } else {
            zoomingOut = false;
        }
    }

    var amount = (view_wview[0]/100)*2;
    
    var up = keyboard_check(ord("W"));
    var left = keyboard_check(ord("A"));
    var down = keyboard_check(ord("S"));
    var right = keyboard_check(ord("D"));
    
    if (up) view_yview[0] -= amount;
    if (down) view_yview[0] += amount;
    if (left) view_xview[0] -= amount;
    if (right) view_xview[0] += amount;
    
    //Control zoom
    if (mouse_wheel_up() &amp;&amp; view_wview &gt; minViewWidth) {
        if(view_wview &gt; midViewWidth &amp;&amp; targetViewWidth != midViewWidth) {
            targetViewWidth = midViewWidth;
        } else {
            targetViewWidth = minViewWidth;
        }
        zoomingIn = true;
        zoomingOut = false;
    }
    
    if (mouse_wheel_down() &amp;&amp; view_wview &lt; maxViewWidth) {
        if(view_wview &lt; midViewWidth &amp;&amp; targetViewWidth != midViewWidth) {
            targetViewWidth = midViewWidth;
        } else {
            targetViewWidth = maxViewWidth;
        }
        zoomingOut = true;
        zoomingIn = false;
    }
    
    // Click to drag view
    // start:
    if (mouse_check_button_pressed(mb_middle)) {
        drag_x = mouse_x
        drag_y = mouse_y
    }
    // update:
    if (mouse_check_button(mb_middle)) {
        // actual dragging logic:
        view_xview = drag_x - (mouse_x - view_xview)
        view_yview = drag_y - (mouse_y - view_yview)
    }
    
    view_xview[0] = clamp(view_xview[0], 0, room_width - view_wview[0]);
    view_yview[0] = clamp(view_yview[0], 0, room_height - view_hview[0]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
