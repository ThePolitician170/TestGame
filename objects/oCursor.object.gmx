<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCursor2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-25</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;

hoverNode = noone;
nodeTimer = 0;

hoverButton = noone;
buttonTimer = 0;

selectedActor = noone;

subImg = 0;

instance_create(0, 0, oSelector);





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set x and y of mouse sprite to mouse position
x = mouse_x;
y = mouse_y;

gridX = floor(x/NODE_SIZE);
gridY = floor(y/NODE_SIZE);

if mouse_check_button(mb_left) {
    subImg = 1;
} else {
    subImg = 0;
}

if(gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width/NODE_SIZE || gridY &gt;= room_height/NODE_SIZE) {
    hoverNode = noone;
} else {
    hoverNode = global.map[gridX, gridY];
}

with(oConfirmButton) {
    if(keyboard_check_pressed(vk_enter) || keyboard_check_pressed(ord(hotKey))){
        other.selectedActor.state = "perform action";
        instance_destroy();
    }
}

if(instance_place(x, y, oButton)) {
    if(instance_place(x, y, oButton) == hoverButton) {
        buttonTimer += 1;
    } else {
        buttonTimer = 0;
    }
    hoverButton = instance_place(x, y, oButton);
} else {
    hoverButton = noone;
    buttonTimer = 0;
}

with(oButton){
    if(keyboard_check_pressed(ord(hotKey))) {
        if(instance_exists(id)) {
            execute_button(oCursor.selectedActor, id);
        }
    }
}

if(keyboard_check_pressed(vk_escape) &amp;&amp; selectedActor != noone) {
    if(selectedActor.state == "begin action") {
        selectedActor.state = "idle";
        with(oConfirmButton) {
            instance_destroy();
        }
        with(oConfirmBox) {
            instance_destroy();
        }
    }
    
    wipe_nodes();
    wipe_buttons();
    movement_range(selectedActor);
        
    if(selectedActor.canAct) {
        get_attack_range(selectedActor);
    }
}

if(mouse_check_button_pressed(mb_left)) {
    if(selectedActor != noone &amp;&amp; hoverButton != noone) {
        execute_button(selectedActor, hoverButton);
    }
    
    if(instance_place(x, y, oConfirmButton)) {
        selectedActor.state = "perform action";
        with(oConfirmButton) {
            instance_destroy();
        }
    }
    
    if(instance_place(x, y, oRetryBox)) {
        with(oFadeLoss) {
            finalize = true;
        } 
        with(oRetryBox) {
            instance_destroy();
        }
    }
    
}

if(mouse_check_button_pressed(mb_left) &amp;&amp; selectedActor != noone &amp;&amp; hoverButton == noone &amp;&amp; hoverNode != noone) {
    if(hoverNode.moveNode) {
        current = hoverNode;
        
        create_move_path(selectedActor, current);
        
        //first clear node of selectedActor
        global.map[selectedActor.gridX, selectedActor.gridY].occupant = noone;
        
        //update selectedActor's coordinates
        selectedActor.gridX = gridX;
        selectedActor.gridY = gridY;
        
        //send selectedActor to destination
        selectedActor.state = "begin path";
        selectedActor.endPath = "ready";
        
        //reduce selectedActor's actions and wipe nodes
        if(hoverNode.G &gt; selectedActor.move) {
            selectedActor.actions -= 2;
        } else if(hoverNode.G != 0) {
            selectedActor.actions -= 1;
        }
        
        selectedActor = noone;
        wipe_buttons();
        wipe_nodes();
    
    }
    
    if(hoverNode.attackNode) {
        switch(selectedActor.attackType) {
            case "melee":
            selectedActor.canAct = false;
            selectedActor.actions -= 2;
            selectedActor.attackTarget = hoverNode.occupant;
            selectedActor.state = "begin attack";
            selectedActor.actionTimer = 10;
            
            selectedActor = noone;
            wipe_buttons();
            wipe_nodes();
            
            break;
            
            case "ranged":
            selectedActor.canAct = false;
            selectedActor.actions -= 2;
            selectedActor.attackTarget = hoverNode.occupant;
            selectedActor.state = "begin attack";
            selectedActor.actionTimer = 10;
            
            selectedActor = noone;
            wipe_buttons();
            wipe_nodes();
            
            break;
                
        }
            
    } //attack node block end
    
    if(hoverNode.actionNode) {
        selectedActor.state = "perform action";
        with(oConfirmBox) {
            instance_destroy();
        }
        with(oConfirmButton) {
            instance_destroy();
        }
        
    }

} 


















































































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw yourself on GUI layer as well...

draw_sprite_ext(sprite_index,subImg,window_mouse_get_x(),window_mouse_get_y(),1,1,0,c_white,1);

reset_draw_defaults();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws cursor and debug info
//draw_sprite_ext(sprite_index,subImg,x,y,0.5,0.5,0,c_white,1);

//Draws tooltip over button
if(hoverButton != noone &amp;&amp; buttonTimer &gt; 15) {
    tempTitle = hoverButton.title;
    
    tempText = hoverButton.text;
    
    draw_set_font(fCritical);
    
    heightY = string_height(tempTitle) + string_height(tempText);
    
    draw_set_color(c_black);
    draw_rectangle(x + 20, y - heightY, x + 20 + string_width(tempTitle), y - heightY + string_height(tempTitle), false);
    
    draw_set_color(c_white);
    draw_text(x + 20, y - heightY, tempTitle);
    
    draw_set_font(fDefault);
    
    draw_set_color(c_black);
    draw_rectangle(x + 20, y - string_height(tempText), x + 20 + string_width(tempText), y, false);
    
    draw_set_color(c_white);
    draw_text(x + 20, y - string_height(tempText), tempText);

}

//Draws tooltip over node
if(hoverNode != noone &amp;&amp; nodeTimer &gt; 60) {
    type = hoverNode.type;

    typeString = "Node type: " + type;
    
    draw_set_font(fCritical);
    
    heightY = string_height(typeString);
    
    draw_set_color(c_black);
    draw_rectangle(x + 20, y - heightY, x + 20 + string_width(typeString), y - heightY + string_height(typeString), false);
    
    draw_set_color(c_white);
    draw_text(x + 20, y - heightY, typeString);
    
    draw_set_font(fDefault);

// hoverNode.occupant != noone

}

//Draws actor info in top right
if(selectedActor != noone) {
    nameAndClass = selectedActor.name + ": " + selectedActor.class;
    
    tempHitPoints = "HP: " + string(selectedActor.hitPoints) + " / " + string(selectedActor.maxHitPoints);
    tempAbilityPoints = "MP: " + string(selectedActor.abilityPoints) + " / " + string(selectedActor.maxAbilityPoints);
    tempStr = "Dexterity: " + string(selectedActor.dexMod);
    
    draw_set_color(c_black);
    draw_rectangle(0, 0, string_width(nameAndClass), string_height(nameAndClass), false);
    
    draw_rectangle(0, HALF_NODE_SIZE, string_width(tempHitPoints), HALF_NODE_SIZE + string_height(tempHitPoints), false);
    
    draw_rectangle(0, NODE_SIZE, string_width(tempAbilityPoints), NODE_SIZE + string_height(tempAbilityPoints), false);
    
    draw_rectangle(0, NODE_SIZE+HALF_NODE_SIZE, string_width(tempStr), NODE_SIZE+HALF_NODE_SIZE + string_height(tempStr), false);

    
    draw_set_color(c_white);
    draw_text(0, 0, nameAndClass);
    draw_text(0, HALF_NODE_SIZE, tempHitPoints);
    draw_text(0, NODE_SIZE, tempAbilityPoints);
    draw_text(0, NODE_SIZE+HALF_NODE_SIZE, tempStr);
}

reset_draw_defaults();








































</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
