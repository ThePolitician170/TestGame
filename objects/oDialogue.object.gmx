<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
message_current = 0;
timer = 0;
cutoff = 0;

message[0] = "";
portrait = noone;
spriteSubImg = 0;
talking = false;

t = 0;
//Amplitude &amp; Freq for Wavy Text
amplitude = 3;
freq = 2;

//Delay time between printing each character
delay = 1;

done = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment sprite sub image and destroy

if(spriteSubImg &lt; 4 &amp;&amp; talking) {
    spriteSubImg += .5;
    audio_play_sound(soundMenuChange, 10, false);
} else {
    spriteSubImg = 0;
}

//Done
if (done)
{
    instance_destroy();
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//t var is for modifiers
t++;
//Set Font
draw_set_font(fDialogue);
//Set Colour
draw_set_colour(c_black);

//Read in array length
message_end = array_length_1d(message);

//If there are messages
if (message_end &gt; 0)
{
    var padding = 25;
    var xScale = display_get_gui_width()/sprite_get_width(sDialogueBox);
    var yScale = (display_get_gui_height()/sprite_get_height(sDialogueBox)) * .25;
    var scaledHeight = (sprite_get_height(sDialogueBox)*yScale);
    var ySpacing = font_get_size(fDialogue) + 5;
    var modifier = 0;
    //Character Width
    var charWidth = 16;
    //How many characters allowed in each line
    var lineEnd = 50;
    //Variables for spacing characters
    var line = 0;
    var space = 0;
    var i = 1;
    
    //Text Position
    var tY = display_get_gui_height() - (sprite_get_height(sDialogueBox)*yScale) + padding;
    var tX = (display_get_gui_width()*.05) + padding;
    
    //Next message or end dialogue
    if (cutoff == string_length(message[message_current]))
    {
        talking = false;
        //draw cursor ??? What does this do?
        //timer++;
        //if (timer &gt; 30) timer = 0;
        
        //Check player input
        if (keyboard_check_pressed(ord('X')) || gamepad_button_check_pressed(0, gp_face1))
        {
            //If more messages go to next message
            if (message_current &lt; message_end-1)
            {
                message_current++;
                cutoff = 0;
            }
            //Destroy dialogue
            else 
            {
                timer = 0;
                done = true;
            }
        }
    } else {
        talking = true;
    }
    
    //Typewriter
    if (cutoff &lt; string_length(message[message_current]))
    {
        if (timer &gt;= delay)
        {
            cutoff++;
            timer = 0;
        }
        else timer++;
    }
    
    //Draw Portrait
    if(portrait != noone) {
        draw_sprite(portrait, spriteSubImg, tX, display_get_gui_height() - scaledHeight - sprite_get_height(portrait));
    }
    
    //Draw sprite dialogue box
    draw_sprite_ext(sDialogueBox, -1, 0, display_get_gui_height() - scaledHeight, xScale, yScale, 0, c_white, 1);
    
    //Text
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff)
    {   
        //check for modifier
        if (string_char_at(message[message_current], i) == "\")
        {
            modifier = real(string_char_at(message[message_current], ++i));
            ++i;
        }
        
        //Go to next line
        var length = 0;
        while (string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current]))
        {
            i++;
            length++;
        }
        
        if (space+length &gt; lineEnd)
        {
            space = 0;
            line++;
        }
        i -= length;
        
        //Draw Text
        switch(modifier)
        {
            case 0: //normal
            {
                draw_set_colour(c_black);
                draw_text(tX+(space*charWidth), tY+(ySpacing*line), string_char_at(message[message_current], i));
                break;
            }
            case 1: //shaky
            {
                draw_set_colour(c_black);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(ySpacing*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 2: //color
            {
                draw_set_colour(c_red);
                draw_text(tX+(space*charWidth), tY+(ySpacing*line), string_char_at(message[message_current], i));
                break;
            }
            case 3: //color and shake
            {
                draw_set_colour(c_red);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(ySpacing*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 4: //Sine movement
            {
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_set_colour(c_black);
                draw_text(tX+(space*charWidth), tY+(ySpacing*line)+shift, string_char_at(message[message_current], i));
                break;
            }
            case 5: //Gradient Text
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                draw_text(tX+(space*charWidth), tY+(ySpacing*line), string_char_at(message[message_current], i));
                break;
            }
            case 6: //Gradient &amp; Sine
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_text(tX+(space*charWidth), tY+(ySpacing*line)+shift, string_char_at(message[message_current], i));
                break;
            }
        }
        
        space++;
        i++;
    }
    
}

reset_draw_defaults();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
