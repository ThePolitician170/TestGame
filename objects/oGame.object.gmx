<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade in and start room
instance_create(x, y, oViewController);
instance_create(x, y, obj_console);

randomize();

reset_draw_defaults();
audio_stop_all();

state = "initializing";
turnOrder = ds_list_create();
turnCounter = -1;
turnMax = 0;
currentActor = noone;
roundCounter = 0;
roundCntrStr = "Round " + string(roundCounter);
global.map = noone;

mapWidth = room_width/NODE_SIZE;
mapHeight = room_height/NODE_SIZE;

//create nodes
for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1) {
        global.map[xx, yy] = instance_create(xx * NODE_SIZE, yy * NODE_SIZE, oNode);
        global.map[xx, yy].gridX = xx;
        global.map[xx, yy].gridY = yy;
    }
}

//populate neighbor lists
for(xx = 0; xx &lt; mapWidth; xx+= 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1) {
        
        node = global.map[xx, yy];
        
        //add left neighbor
        if(xx &gt; 0) {
            ds_list_add(node.neighbors, global.map[xx - 1, yy]);
        }
        
        //add right neighbor
        if(xx &lt; mapWidth - 1) {
            ds_list_add(node.neighbors, global.map[xx + 1, yy]);
        }
        
        //add top neighbor
        if(yy &gt; 0) {
            ds_list_add(node.neighbors, global.map[xx, yy - 1]);
        }
        
        //add bottom neighbor 
        if(yy &lt; mapHeight - 1) {
            ds_list_add(node.neighbors, global.map[xx, yy + 1]);
        }
        
        //top left neighbor
        if(xx &gt; 0 &amp;&amp; yy &gt; 0) {
            ds_list_add(node.neighbors, global.map[xx - 1, yy - 1]);
        }
        
        //top right neighbor
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &gt; 0) {
            ds_list_add(node.neighbors, global.map[xx + 1, yy - 1]);
        }
        
        //bottom left neighbor
        if(xx &gt; 0 &amp;&amp; yy &lt; mapHeight - 1) {
            ds_list_add(node.neighbors, global.map[xx - 1, yy + 1]);
        }
        
        //bottom right neighbor
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &lt; mapHeight - 1) {
            ds_list_add(node.neighbors, global.map[xx + 1, yy + 1]);
        }   
    }
}

instance_create(x, y, oFadeIn);
instance_create(x, y, oCursor);






































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill music and create oFadeLoss
audio_stop_sound(global.bgm);
instance_create(0, 0, oFadeLoss);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles nodes and turn order

switch(state) {

    case "initializing":
        with(oNode) {
            if(instance_position(x + HALF_NODE_SIZE, y + HALF_NODE_SIZE, oTerrain)) {
                tempTerrain = instance_position(x + HALF_NODE_SIZE, y + HALF_NODE_SIZE, oTerrain);
                
                switch(tempTerrain.type) {
                    case "wall":
                        instance_change(oWall, true);
                        type = "wall";                    
                        passable = false;
                                
                        break;
                        
                    case "rubble":
                        instance_change(oRubble, true);
                        type = "rubble";
                        cost = 2;    
                    
                        break;
                    
                    case "grass":
                        instance_change(oGrass, true);
                        type = tempTerrain.type;
                        
                        break;
                        
                    case "dirt":
                        instance_change(oDirt, true);
                        type = tempTerrain.type;
                        
                        break;
                        
                }
                
                with(tempTerrain) {
                    instance_destroy();
                }

            }
            

        }
        state = "init characters";
        break;
        
    case "init characters":
        with(oNode) {
            if(instance_position(x + HALF_NODE_SIZE, y + HALF_NODE_SIZE, oActor)) {
                occupant = instance_position(x + HALF_NODE_SIZE, y + HALF_NODE_SIZE, oActor);
                occupant.gridX = gridX;
                occupant.gridY = gridY;                   
            }
        }
        state = "roll init";
        break;
        
    //Set turn order
    case "roll init":
        tempInit = ds_priority_create();
           
        with(oActor) {
                       
            initRoll = irandom_range(1, 20) + dexMod;
            
            ds_priority_add(other.tempInit, id, initRoll);
        }     
        
        while(ds_priority_size(tempInit) &gt; 0) {
            ds_list_add(turnOrder, ds_priority_delete_max(tempInit));
        }   
        
        turnMax = ds_list_size(turnOrder);
        
        firstActor = ds_list_find_value(turnOrder, 0);
        
        //initialize turn order objects
        curActorBox = instance_create(x, y, oActorBox);
        curActorBox.actor = firstActor;
        
        //Create turn order boxes
        turnOrderBoxes = init_turn_order_UI();
        
        //Create action menu for Actors
        actionMenu = create_action_menu(firstActor);
        
        ds_priority_destroy(tempInit);
        
        state = "waiting";
        break;
        
    case "ready":
        if(currentActor == noone || currentActor.state == "dead") {
        
            redCount = 0;
            blueCount = 0;
            with(oActor) {
                if(army == RED_ARMY &amp;&amp; hitPoints &gt; 0) {
                    other.redCount += 1;
                }
                
                if(army == BLUE_ARMY &amp;&amp; hitPoints &gt; 0) {
                    other.blueCount += 1;
                }
                
                //Kill anyone still "alive"
                if(hitPoints &lt;= 0 &amp;&amp; state != "dead" &amp;&amp; state != "dying") {
                    state = "dying";
                }
            }
            
            if(redCount &gt; 0 &amp;&amp; blueCount &gt; 0) {
        
                turnCounter += 1;
                
                if(turnCounter &gt;= turnMax) {
                    turnCounter = 0;
                    roundCounter += 1;
                }
                
                currentActor = ds_list_find_value(turnOrder, turnCounter);
                
                if(currentActor.hitPoints &gt; 0)  {
                 
                    //If it's not the first turn
                    if(roundCounter != 0 || turnCounter != 0) {
                        update_turn_order();
                    } 
                    
                    update_action_menu(currentActor, actionMenu);
                
                    currentActor.actions = 2;
                    currentActor.canAct = true;
                    currentActor.actionTimer = 60;
                    
                    currentActor.state = "initialize turn"
                
                } else {
                    currentActor = noone;
                }
                
            } else {
                if(blueCount &lt;= 0) {
                    state = "game over";
                } else {
                    state = "victory";
                }
                
            }
            
        }
             
        break;
        
    case "game over":
        audio_sound_gain(global.bgm, 0, WAIT_TIME);
        alarm[0] = room_speed*(WAIT_TIME/1000);
        state = "waiting";
        break;
    
    case "victory":
        instance_create(0, 0, oFadeWin);
        state = "waiting";
        break;
              
}































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play background music

global.bgm = audio_play_sound(bgmBattleTheme1,100,true);








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw battle GUI

//Things to draw...
// 1. If we have a currentActor - Current actor name/stats -- done in oActorBox
// 2. Round counter
// 3. Turn order -- done in oTurnOrder
// 4. Battle log

//Draw Round counter
draw_set_color(c_black);
draw_set_font(fCritical);
draw_text(0,0,roundCntrStr);

reset_draw_defaults();








</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
