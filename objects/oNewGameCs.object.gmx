<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTestTavitIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables and set view

//Camera Variables
paths[0] = pth_to_orphanage;
paths[1] = pth_from_orphanage;
//Camera set up in Room Start
camera = noone;

//Set up view
view_xview = (x+(sprite_get_width(sprite_index)/2)) - view_wview/2;
view_yview = (y+(sprite_get_height(sprite_index)*2.5)) - view_hview;

//"Stage" variables
stage = 1;

actionTimer = 0;

endaction = 0;
moveSpeed = 2;
absolute = 1;

mapWidth = room_width/NODE_SIZE;
mapHeight = room_height/NODE_SIZE;

//create grass
for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1) {
        map[xx, yy] = instance_create(xx * NODE_SIZE, yy * NODE_SIZE, oNode);
        map[xx, yy].gridX = xx;
        map[xx, yy].gridY = yy;
    }
}

spriteIdle = sTestTavitIdle;
walkRight = sTestTavitR;
walkLeft = sTestTavitL;
walkUp = sTestTavitU;
walkDown = sTestTavitD;
spriteDead = sTestTavitDead;
spriteDying = sTestTavitDying;

image_speed = 2/room_speed;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Walking/Idle animation
if(xprevious&gt;x){sprite_index=walkLeft}; 
if(xprevious&lt;x){sprite_index=walkRight}; 
if(yprevious&gt;y){sprite_index=walkUp}; 
if(yprevious&lt;y){sprite_index=walkDown};

if(xprevious=x&amp;&amp;yprevious=y){sprite_index=spriteIdle};









</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch stages and play out scene
if(actionTimer &gt; 0) {
    actionTimer -= 1;
}
//Whenever we move characters we increment stage twice so next case is +2.

switch(stage) {

    case 1:
        with(oNode) {
            if(instance_position(x + 16, y + 16, oTerrain)) {
               tempTerrain = instance_position(x + 16, y + 16, oTerrain);
                switch(tempTerrain.type) {
                    case "wall":
                        instance_change(oWall, true);   
                    break;
                }
                with(tempTerrain) {
                    instance_destroy();
                }
                
            } else {
            
            sprite_index = sGrass;
            
            }
            
        } 
        
    actionTimer = 45;    
    stage += 1;
    break;
    
    case 2:
        if(actionTimer = 0) {
            //Start moving
            path_start(paths[0], moveSpeed, endaction, absolute);
            
            //Move camera
            camera.pathIndex = 0;
            camera.move = true;
                  
            stage += 1;
        }
    
    break;
    
    case 4:
        if(actionTimer = 0) {
            message[0] = "...";
            create_dialogue(message, sTavitNorm);
            
            stage += 1;
        }
        
    break;
    
    case 5:    
        if(instance_exists(oDialogue)) {
            actionTimer = 30;
        }
        //Put baby sprite at door and walk away
        if(!instance_exists(oBabyAurik) &amp;&amp; actionTimer &lt;= 0) {
            instance_create(192, 256, oBabyAurik);
            actionTimer = 60;
        } else if(actionTimer &lt;= 0) {
            path_start(paths[1], moveSpeed, endaction, absolute);
            
            stage += 1;
        }
    break;
    
    case 7:
        //Delilah comes out, speaks, and takes Aurik inside
        with(oOrphanage) {
            subImg = 1;
        }
        if(!instance_exists(oDelilah)) {
            instance_create(192, 224, oDelilah);
            actionTimer = 30;
        } else if (actionTimer &lt;= 0) {
            message[0] = "Oh? What's this?";
            message[1] = "Another one?";
            message[2] = "Aurik huh? ...Well...in you go.";
            create_dialogue(message, sDelilahNorm);
            message = noone;
            
            stage += 1;
                
        }
    
    break;
    
    case 8:
        //Once dialogue is gone move on
        if(instance_exists(oDialogue)) {
            actionTimer = 15;
        }
        if(actionTimer &lt;= 0) {
            //Delilah takes baby and goes inside
            //Destroy baby instance
            if(instance_exists(oBabyAurik)) {
                with(oBabyAurik) {
                    instance_destroy();
                }
                actionTimer = 15;
            } else {
                with(oDelilah) {
                    instance_destroy();
                }
                with(oOrphanage) {
                    subImg = 0;
                }
                
                //Move camera
                camera.pathIndex = 1;
                camera.move = true;
                
                stage += 1;
            } 
        }
    break;
    
    case 9:
        //Check camera stopped and display dialogue
        if(camera.moving) {
            actionTimer = 45;
        }
        if(!camera.moving &amp;&amp; actionTimer &lt;= 0) {
            message[0] = "...I will watch over you sir.";
            create_dialogue(message, sTavitNorm);
            stage += 1;
        }
    break;
    
    case 10:
        if(!instance_exists(oDialogue)) {
            fadeOut = instance_create(x, y, oFadeOut);
            fadeOut.targetRoom = rm_test1;
        }
    break;

}











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment stage


actionTimer = 30;
stage += 1;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create camera and play background music

camera = create_CS_camera(view_xview[0], view_yview[0], paths);

global.bgm = audio_play_sound(mus_titlescreen,100,true);








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self();



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
